library(rugarch)
spec=ugarchspec()
spec1=ugarchspec()
spec2=ugarchspec(variance.model = list(model = "eGARCH", garchOrder = c(1, 1)))

runGarch=function(spec, GT.list) {
fit=list()
for(i in 1:length(GT.list)){
  data=GT.list[[i]]
  returns=data[,2]
  #returns=na.approx(returns, na.rm=F)
  returns=returns[-which(is.na(returns))]
  fit[[i]]=NA
  
  errortest=tryCatch(
    ugarchfit(spec, returns),
    error=function(e) e
    )

  if(!inherits(errortest, "error")){
    fit[[i]]=ugarchfit(spec=spec, data=returns)
  }
}
return(fit)
}

fit1=runGarch(spec1, GT.list)
fit2=runGarch(spec2, GT.list)


### The tests here are based on the article:
#http://faculty.washington.edu/ezivot/research/practicalgarchfinal.pdf
library(e1071) 
library(tseries)

#Data for FTSE 100
data=GT.list[[29]]
returns=data[-which(is.na(data[,2])),2]

par(mfrow=c(3,1))
plot(returns)
plot(returns^2)
plot(abs(returns))

acf(returns)
acf(returns^2)
acf(abs(returns))

tests=list()
i=1
tests[[i]]=jarque.bera.test(returns)
names(tests)[i]="Jarque-Bera test"
i=i+1
tests[[i]]=mean(returns)
names(tests)[i]="Mean"
i=i+1
tests[[i]]=median(returns)
names(tests)[i]="Median"
i=i+1
tests[[i]]=min(returns)
names(tests)[i]="Min"
i=i+1
tests[[i]]=max(returns)
names(tests)[i]="Max"
i=i+1
tests[[i]]=sd(returns)
names(tests)[i]="Standard deviation"
i=i+1
tests[[i]]=skewness(returns)
names(tests)[i]="Skewness"
i=i+1
tests[[i]]=kurtosis(returns)
names(tests)[i]="Kurtosis"
i=i+1
#Stylized facts: volatility clustering, fat tails, volatility mean reversion, and asymmetry
#A GARCH model with normal errors can replicate some of the fat-tailed behavior observed in financial time series
#(3) http://faculty.washington.edu/ezivot/research/practicalgarchfinal.pdf

#The stylized fact of volatility clustering in returns manifests itself as autocorrelation in squared and absolute returns
#or in the residuals from the estimated conditional mean equation.
#The significance of these autocorrelations may be tested using the Ljung-Box or modified Q-statistic
#(4) http://faculty.washington.edu/ezivot/research/practicalgarchfinal.pdf

BoxTest=list()
i=1
BoxTest[[i]]=Box.test(returns^2, lag=1, type=("Ljung-Box"), fitdf=0)
i=i+1
BoxTest[[i]]=Box.test(returns^2, lag=5, type=("Ljung-Box"), fitdf=0)
i=i+1
BoxTest[[i]]=Box.test(returns^2, lag=10, type=("Ljung-Box"), fitdf=0)

#Model selection, most negative information criteria is best
#str(fit)
spec=list()
i=1
spec[[i]]=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 0)))
i=i+1
spec[[i]]=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(2, 0)))
i=i+1
spec[[i]]=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(3, 0)))
i=i+1
spec[[i]]=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(4, 0)))
i=i+1
spec[[i]]=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(5, 0)))
i=i+1
spec[[i]]=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)))
i=i+1
spec[[i]]=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 2)))
i=i+1
spec[[i]]=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(2, 1)))
i=i+1
spec[[i]]=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(2, 2)))

names(spec)=c("p=1, q=0", "p=2, q=0", "p=3, q=0", "p=4, q=0", "p=5, q=0", "p=1, q=1", "p=1, q=2", "p=2, q=1", "p=2, q=2")

fit=list()
infocrit=as.data.frame(matrix(NA, 4, length(spec)))
rownames(infocrit)=c("Akaike", "Bayes", "Shibata", "Hannan-Qinn")
for(i in 1:length(spec)){

  fit[[i]]=NA
  
  errortest=tryCatch(
    ugarchfit(spec=spec[[i]], data=returns, solver="hybrid"),
    error=function(e) e
    )
  if(!inherits(errortest, "error")){
    fit[[i]]=ugarchfit(spec=spec[[i]], data=returns, solver="hybrid")
  }

  errortest=tryCatch(
    infocriteria(fit[[i]]),
    error=function(e) e
    )
  if(!inherits(errortest, "error")){
    infocrit[,i]=infocriteria(fit[[i]])
  }
}
names(fit)=names(spec)
modelselection=as.data.frame(matrix(NA, nrow(infocrit), 2))
rownames(modelselection)=rownames(infocrit)
for(j in 1:nrow(infocrit)) modelselection[j,1]=which.min(infocrit[j,])
for(j in 1:nrow(modelselection)) modelselection[j,2]=names(spec)[modelselection[j,1]]

#JB test
jarque.bera.test(residuals(fit[[6]]))
jarque.bera.test(residuals(fit[[8]]))
jarque.bera.test(returns)

#From here, we proceed using the GARCH(1,1) model
garch11=fit[[6]]
parameters=fit[[6]]@fit$matcoef
parameters[5,1]+parameters[6,1]
#The paramteres are very close to summing to one
